# .github/workflows/matrix-failure-detection.yml
name: matrix-failure-detection

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Matrix戦略を使用するメインジョブ
  matrix-job:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 一つが失敗しても他を続行
      matrix:
        node-version: [14, 16, 18, 20]
    name: matrix-job-${{ matrix.node-version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get current job ID
        id: get-job-id
        uses: ayachensiyuan/get-action-job-id@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          job-name: matrix-job-${{ matrix.node-version }}
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      # 実際のテスト/ビルド処理（デモ用に意図的に一部を失敗させる）
      - name: Run tests
        id: tests
        run: |
          echo "Testing with Node.js ${{ matrix.node-version }}"
          # デモ用：Node.js 14では失敗させる
          if [ "${{ matrix.node-version }}" = "14" ]; then
            echo "Simulating test failure for Node.js 14"
            exit 1
          fi
          echo "Tests passed!"
        continue-on-error: true
      
      # 結果をアーティファクトとして保存
      - name: Save job result
        if: always()
        run: |
          mkdir -p results
          echo "{
            \"job_id\": \"${{ steps.get-job-id.outputs.jobId }}\",
            \"node_version\": \"${{ matrix.node-version }}\",
            \"test_status\": \"${{ steps.tests.outcome }}\",
            \"github_job_status\": \"${{ job.status }}\",
            \"run_id\": \"${{ github.run_id }}\",
            \"run_number\": \"${{ github.run_number }}\"
          }" > results/result.json
          
          echo "GitHub Job ID: ${{ steps.get-job-id.outputs.jobId }}"
          echo "Test outcome: ${{ steps.tests.outcome }}"
      
      - name: Upload job result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: job-result-${{ steps.get-job-id.outputs.jobId }}
          path: results/

  # 失敗したジョブを検出・集約するジョブ
  collect-failures:
    needs: matrix-job
    runs-on: ubuntu-latest
    if: always()  # matrix-jobが失敗しても実行
    
    outputs:
      failed_count: ${{ steps.analyze.outputs.failed_count }}
      has_failures: ${{ steps.analyze.outputs.has_failures }}
      failed_jobs_matrix: ${{ steps.analyze.outputs.failed_jobs_matrix }}
    
    steps:
      - name: Download all job results
        uses: actions/download-artifact@v4
        with:
          path: all-results/
          pattern: job-result-*
      
      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
      
      - name: Analyze failed jobs
        id: analyze
        run: |
          failed_jobs=()
          failed_details=""
          total_jobs=0
          
          echo "=== Job Results Analysis ==="
          
          # 結果ディレクトリを探索
          for result_dir in all-results/job-result-*/; do
            if [ -d "$result_dir" ]; then
              result_file="$result_dir/result.json"
              if [ -f "$result_file" ]; then
                total_jobs=$((total_jobs + 1))
                
                job_id=$(jq -r '.job_id' "$result_file")
                test_status=$(jq -r '.test_status' "$result_file")
                github_job_status=$(jq -r '.github_job_status' "$result_file")
                node_version=$(jq -r '.node_version' "$result_file")
                
                echo "Job ID: $job_id | Test Status: $test_status | Job Status: $github_job_status | Node: $node_version"
                
                # テストが失敗した場合、またはジョブ自体が失敗した場合
                if [[ "$test_status" == "failure" ]] || [[ "$github_job_status" == "failure" ]]; then
                  failed_jobs+=("$job_id")
                  failed_details+="- **Job ID $job_id**: Node.js $node_version (Test: $test_status, Job: $github_job_status)\n"
                fi
              fi
            fi
          done
          
          echo ""
          echo "=== Failed Jobs Summary ==="
          echo "Total jobs: $total_jobs"
          
          if [ ${#failed_jobs[@]} -eq 0 ]; then
            echo "✅ All matrix jobs succeeded!"
            echo "failed_count=0" >> $GITHUB_OUTPUT
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "failed_jobs_matrix=[]" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed jobs count: ${#failed_jobs[@]}"
            echo "Failed job IDs:"
            printf '%s\n' "${failed_jobs[@]}"
            
            # matrixで使用するためのJSON配列を生成
            failed_jobs_json="["
            for i in "${!failed_jobs[@]}"; do
              if [ $i -gt 0 ]; then
                failed_jobs_json+=","
              fi
              failed_jobs_json+="\"${failed_jobs[$i]}\""
            done
            failed_jobs_json+="]"
            
            echo "Failed jobs JSON for matrix: $failed_jobs_json"
            
            # GitHub Outputに設定
            echo "failed_count=${#failed_jobs[@]}" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "failed_jobs_matrix=$failed_jobs_json" >> $GITHUB_OUTPUT
          fi
      
      - name: Create failure summary
        if: steps.analyze.outputs.has_failures == 'true'
        run: |
          {
            echo "## 🚨 Matrix Job Failures Detected"
            echo ""
            echo "**Failed Jobs Count:** ${{ steps.analyze.outputs.failed_count }}"
            echo ""
            echo "**Failed Job IDs for matrix:**"
            echo '```json'
            echo "${{ steps.analyze.outputs.failed_jobs_matrix }}"
            echo '```'
          } >> $GITHUB_STEP_SUMMARY
      
      - name: Post comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.analyze.outputs.has_failures == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const failedJobsMatrix = JSON.parse(`${{ steps.analyze.outputs.failed_jobs_matrix }}`);
            
            const comment = `## 🚨 Matrix Job Failures
            
            **${failedJobsMatrix.length} job(s) failed in the matrix build:**
            
            Failed Job IDs: ${failedJobsMatrix.join(', ')}
            
            **Matrix JSON for reprocessing:**
            \`\`\`json
            ${{ steps.analyze.outputs.failed_jobs_matrix }}
            \`\`\`
            
            Please check the workflow logs for more details.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # 失敗したジョブIDに対してmatrix戦略で処理するジョブ
  handle-failures:
    needs: collect-failures
    runs-on: ubuntu-latest
    if: needs.collect-failures.outputs.has_failures == 'true'
    strategy:
      matrix:
        job_id: ${{ fromJson(needs.collect-failures.outputs.failed_jobs_matrix) }}
    
    steps:
      - name: Process failed job
        run: |
          echo "Processing failed job ID: ${{ matrix.job_id }}"
          
          # ここで失敗したジョブIDに対する処理を実行
          # 例：再実行、通知、レポート生成など
          echo "Handling failure for job: ${{ matrix.job_id }}"
      
      - name: Send specific notification
        run: |
          echo "🚨 Sending notification for failed job: ${{ matrix.job_id }}"
          # ここで個別の通知処理を実装
          # 例：Slack、Teams、メールなど

  # 成功時の処理例
  handle-success:
    needs: collect-failures
    runs-on: ubuntu-latest
    if: needs.collect-failures.outputs.has_failures == 'false'
    
    steps:
      - name: All jobs succeeded
        run: |
          echo "✅ All matrix jobs completed successfully!"
          echo "No failed jobs to process."
