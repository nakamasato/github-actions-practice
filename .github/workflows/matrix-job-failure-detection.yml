# .github/workflows/matrix-failure-detection.yml
name: matrix-failure-detection

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # MatrixÊà¶Áï•„Çí‰ΩøÁî®„Åô„Çã„É°„Ç§„É≥„Ç∏„Éß„Éñ
  matrix-job:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # ‰∏Ä„Å§„ÅåÂ§±Êïó„Åó„Å¶„ÇÇ‰ªñ„ÇíÁ∂öË°å
      matrix:
        node-version: [14, 16, 18, 20]
    name: matrix-job-${{ matrix.node-version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      # ÂÆüÈöõ„ÅÆ„ÉÜ„Çπ„Éà/„Éì„É´„ÉâÂá¶ÁêÜÔºà„Éá„É¢Áî®„Å´ÊÑèÂõ≥ÁöÑ„Å´‰∏ÄÈÉ®„ÇíÂ§±Êïó„Åï„Åõ„ÇãÔºâ
      - name: Run tests
        id: tests
        run: |
          echo "Testing with Node.js ${{ matrix.node-version }}"
          # „Éá„É¢Áî®ÔºöNode.js 14„Åß„ÅØÂ§±Êïó„Åï„Åõ„Çã
          if [ "${{ matrix.node-version }}" = "14" ]; then
            echo "Simulating test failure for Node.js 14"
            exit 1
          fi
          echo "Tests passed!"
        continue-on-error: true
      
      # ÁµêÊûú„Çí„Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„Éà„Å®„Åó„Å¶‰øùÂ≠ò
      - name: Save job result
        if: always()
        run: |
          mkdir -p results
          echo "{
            \"job_name\": \"${{ github.job }}\",
            \"node_version\": \"${{ matrix.node-version }}\",
            \"test_status\": \"${{ steps.tests.outcome }}\",
            \"github_job_status\": \"${{ job.status }}\",
            \"run_id\": \"${{ github.run_id }}\",
            \"run_number\": \"${{ github.run_number }}\"
          }" > results/result.json
          
          echo "Job name: ${{ github.job }}"
          echo "Test outcome: ${{ steps.tests.outcome }}"
      
      - name: Upload job result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: job-result-${{ github.job }}
          path: results/

  # Â§±Êïó„Åó„Åü„Ç∏„Éß„Éñ„ÇíÊ§úÂá∫„ÉªÈõÜÁ¥Ñ„Åô„Çã„Ç∏„Éß„Éñ
  collect-failures:
    needs: matrix-job
    runs-on: ubuntu-latest
    if: always()  # matrix-job„ÅåÂ§±Êïó„Åó„Å¶„ÇÇÂÆüË°å
    
    outputs:
      failed_count: ${{ steps.analyze.outputs.failed_count }}
      has_failures: ${{ steps.analyze.outputs.has_failures }}
      failed_job_names_matrix: ${{ steps.analyze.outputs.failed_job_names_matrix }}
    
    steps:
      - name: Download all job results
        uses: actions/download-artifact@v4
        with:
          path: all-results/
          pattern: job-result-*
      
      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
      
      - name: Analyze failed jobs
        id: analyze
        run: |
          failed_job_names=()
          failed_details=""
          total_jobs=0
          
          echo "=== Job Results Analysis ==="
          
          # ÁµêÊûú„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊé¢Á¥¢
          for result_dir in all-results/job-result-*/; do
            if [ -d "$result_dir" ]; then
              result_file="$result_dir/result.json"
              if [ -f "$result_file" ]; then
                total_jobs=$((total_jobs + 1))
                
                job_name=$(jq -r '.job_name' "$result_file")
                test_status=$(jq -r '.test_status' "$result_file")
                github_job_status=$(jq -r '.github_job_status' "$result_file")
                node_version=$(jq -r '.node_version' "$result_file")
                
                echo "Job Name: $job_name | Test Status: $test_status | Job Status: $github_job_status | Node: $node_version"
                
                # „ÉÜ„Çπ„Éà„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÄÅ„Åæ„Åü„ÅØ„Ç∏„Éß„ÉñËá™‰Ωì„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà
                if [[ "$test_status" == "failure" ]] || [[ "$github_job_status" == "failure" ]]; then
                  failed_job_names+=("$job_name")
                  failed_details+="- **$job_name**: Node.js $node_version (Test: $test_status, Job: $github_job_status)\n"
                fi
              fi
            fi
          done
          
          echo ""
          echo "=== Failed Jobs Summary ==="
          echo "Total jobs: $total_jobs"
          
          if [ ${#failed_job_names[@]} -eq 0 ]; then
            echo "‚úÖ All matrix jobs succeeded!"
            echo "failed_count=0" >> $GITHUB_OUTPUT
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "failed_job_names_matrix=[]" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed jobs count: ${#failed_job_names[@]}"
            echo "Failed job names:"
            printf '%s\n' "${failed_job_names[@]}"
            
            # matrix„Åß‰ΩøÁî®„Åô„Çã„Åü„ÇÅ„ÅÆJSONÈÖçÂàó„ÇíÁîüÊàê
            failed_job_names_json="["
            for i in "${!failed_job_names[@]}"; do
              if [ $i -gt 0 ]; then
                failed_job_names_json+=","
              fi
              failed_job_names_json+="\"${failed_job_names[$i]}\""
            done
            failed_job_names_json+="]"
            
            echo "Failed job names JSON for matrix: $failed_job_names_json"
            
            # GitHub Output„Å´Ë®≠ÂÆö
            echo "failed_count=${#failed_job_names[@]}" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "failed_job_names_matrix=$failed_job_names_json" >> $GITHUB_OUTPUT
          fi
      
      - name: Create failure summary
        if: steps.analyze.outputs.has_failures == 'true'
        run: |
          {
            echo "## üö® Matrix Job Failures Detected"
            echo ""
            echo "**Failed Jobs Count:** ${{ steps.analyze.outputs.failed_count }}"
            echo ""
            echo "**Failed Job Names for matrix:**"
            echo '```json'
            echo "${{ steps.analyze.outputs.failed_job_names_matrix }}"
            echo '```'
          } >> $GITHUB_STEP_SUMMARY
      
      - name: Post comment on PR (if applicable)
        if: github.event_name == 'pull_request' && steps.analyze.outputs.has_failures == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const failedJobNames = JSON.parse(`${{ steps.analyze.outputs.failed_job_names_matrix }}`);
            
            const comment = `## üö® Matrix Job Failures
            
            **${failedJobNames.length} job(s) failed in the matrix build:**
            
            Failed Job Names: ${failedJobNames.join(', ')}
            
            **Matrix JSON for reprocessing:**
            \`\`\`json
            ${{ steps.analyze.outputs.failed_job_names_matrix }}
            \`\`\`
            
            Please check the workflow logs for more details.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Â§±Êïó„Åó„Åü„Ç∏„Éß„ÉñÂêç„Å´ÂØæ„Åó„Å¶matrixÊà¶Áï•„ÅßÂá¶ÁêÜ„Åô„Çã„Ç∏„Éß„Éñ
  handle-failures:
    needs: collect-failures
    runs-on: ubuntu-latest
    if: needs.collect-failures.outputs.has_failures == 'true'
    strategy:
      matrix:
        job_name: ${{ fromJson(needs.collect-failures.outputs.failed_job_names_matrix) }}
    
    steps:
      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi
      
      - name: Get job ID from job name
        id: get-job-id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          JOB_ID=$(gh run --repo ${{ github.repository }} view ${{ github.run_id }} --json jobs --jq '.jobs[] | select(.name == "${{ matrix.job_name }}") | .databaseId')
          echo "Job ID for ${{ matrix.job_name }}: $JOB_ID"
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT
          
          # „Ç∏„Éß„Éñ„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇÇÂèñÂæó
          JOB_DETAILS=$(gh run --repo ${{ github.repository }} view ${{ github.run_id }} --json jobs --jq '.jobs[] | select(.name == "${{ matrix.job_name }}")')
          echo "Job details:"
          echo "$JOB_DETAILS" | jq .
      
      - name: Process failed job
        run: |
          echo "Processing failed job name: ${{ matrix.job_name }}"
          echo "Job ID: ${{ steps.get-job-id.outputs.job_id }}"
          
          # „Ç∏„Éß„ÉñÂêç„Åã„ÇâNode.js„Éê„Éº„Ç∏„Éß„É≥„ÇíÊäΩÂá∫
          NODE_VERSION=$(echo "${{ matrix.job_name }}" | sed 's/matrix-job-//')
          echo "Node.js version: $NODE_VERSION"
          
          # Node.js„Éê„Éº„Ç∏„Éß„É≥„Å´Âøú„Åò„ÅüÂá¶ÁêÜ
          case "$NODE_VERSION" in
            "14")
              echo "Handling Node.js 14 specific failure..."
              echo "- Checking compatibility issues"
              echo "- Running fallback tests"
              ;;
            "16")
              echo "Handling Node.js 16 specific failure..."
              echo "- Analyzing dependency conflicts"
              ;;
            "18")
              echo "Handling Node.js 18 specific failure..."
              echo "- Checking ESM compatibility"
              ;;
            "20")
              echo "Handling Node.js 20 specific failure..."
              echo "- Verifying latest features"
              ;;
            *)
              echo "Handling unknown Node.js version failure: $NODE_VERSION"
              ;;
          esac
      
      - name: Send specific notification
        run: |
          echo "üö® Sending notification for failed job:"
          echo "  Job Name: ${{ matrix.job_name }}"
          echo "  Job ID: ${{ steps.get-job-id.outputs.job_id }}"
          # „Åì„Åì„ÅßÂÄãÂà•„ÅÆÈÄöÁü•Âá¶ÁêÜ„ÇíÂÆüË£Ö
          # ‰æãÔºöSlack„ÄÅTeams„ÄÅ„É°„Éº„É´„Å™„Å©

  # ÊàêÂäüÊôÇ„ÅÆÂá¶ÁêÜ‰æã
  handle-success:
    needs: collect-failures
    runs-on: ubuntu-latest
    if: needs.collect-failures.outputs.has_failures == 'false'
    
    steps:
      - name: All jobs succeeded
        run: |
          echo "‚úÖ All matrix jobs completed successfully!"
          echo "No failed jobs to process."
