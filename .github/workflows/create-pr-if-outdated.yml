name: create-pr-if-outdated

on:
  schedule:
    - cron:  '0 0 * * MON'

env:
  BRANCH_NAME: update-date-in-readme
  BASE_BRANCH_NAME: master

jobs:
  create-pr-if-outdated:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BASE_BRANCH_NAME }}

      - name: check date in readme
        id: check
        run: |
          last_updated_date=$(grep -i 'last updated' README.md | sed 's/.*Last Updated: \(.*\)/\1/')
          git_last_updated_date=$(git log -1 --format="%at" | xargs -I{} date -d @{} +%Y-%m-%d)
          echo "git_last_updated_date: $git_last_updated_date"
          if [ "$last_updated_date" = "$git_last_updated_date" ];then
            outdated=false
          else
            outdated=true
          fi
          echo "::set-output name=outdated::$outdated"
          echo "::set-output name=updated_date::$git_last_updated_date"

      - name: update date in readme and commit
        if:  ${{ steps.check.outputs.outdated == 'true' }}
        id: commit
        run: |
          sed -i "s/.*Last Updated: \(.*\)/- Last Updated: ${{ steps.check.outputs.updated_date }}/" README.md
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b ${{ env.BRANCH_NAME }}
          git add .
          git commit -m 'update date'
          git push -u origin HEAD -f

      - name: check if pr exists
        id: check_pr
        if:  ${{ steps.check.outputs.outdated == 'true' }}
        run: |
          echo "::set-output name=count::$(gh pr list -S head:${{ env.BRANCH_NAME }} -B ${{ env.BASE_BRANCH_NAME }} | wc -l)"

      - name: create pr
        if: ${{ steps.check.outputs.outdated == 'true' && steps.check_pr.outputs.count == 0 }}
        run: |
          gh pr create -B "${{ env.BASE_BRANCH_NAME }}" -t "Update last updated date in README" -b ""
